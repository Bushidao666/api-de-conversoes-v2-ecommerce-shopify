{% comment %}
  FACEBOOK CONVERSIONS API E-COMMERCE - SHOPIFY SNIPPETS
  
  Snippets prontos para implementa√ß√£o em temas Shopify.
  Copie e cole nos arquivos apropriados do seu tema.
  
  Vers√£o: 2.0.0
  Compat√≠vel com: Shopify 2.0 themes
{% endcomment %}

{% comment %} ===== SNIPPET 1: CONFIGURA√á√ÉO BASE ===== {% endcomment %}
{% comment %} 
  Arquivo: layout/theme.liquid 
  Posi√ß√£o: Antes de </head>
{% endcomment %}

<!-- Facebook Conversions API E-commerce Configuration -->
<script>
  window.FBCAPI_CONFIG = {
    apiUrl: 'https://sua-api.com/api/track',
    shopUrl: '{{ shop.permanent_domain }}',
    currency: '{{ cart.currency.iso_code }}',
    debug: {{ settings.fbcapi_debug | default: false }},
    version: '2.0.0'
  };

  window.FBCAPI = {
    getUserData: function() {
      const userData = {
        {% if customer %}
        em: ['{{ customer.email | escape }}'],
        fn: ['{{ customer.first_name | escape }}'],
        ln: ['{{ customer.last_name | escape }}'],
        external_id: ['{{ customer.id }}']
        {% else %}
        external_id: ['guest_' + Date.now()]
        {% endif %}
      };
      
      {% if customer.phone %}
      userData.ph = ['{{ customer.phone | escape }}'];
      {% endif %}
      
      return userData;
    },

    generateEventId: function() {
      return 'fbcapi_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    },

    getUrlParameters: function() {
      const urlParams = new URLSearchParams(window.location.search);
      const params = {};
      
      const trackingParams = [
        'utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term',
        'fbclid', 'gclid', 'ttclid', 'ref', 'source', 'affiliate_id'
      ];
      
      trackingParams.forEach(param => {
        if (urlParams.has(param)) {
          params[param] = urlParams.get(param);
        }
      });
      
      return params;
    },

    sendEvent: function(eventType, customData, userData) {
      if (!window.FBCAPI_CONFIG.apiUrl) {
        console.warn('[FBCAPI] API URL not configured');
        return;
      }

      const eventId = this.generateEventId();
      const payload = {
        userData: userData || this.getUserData(),
        customData: customData,
        event_id: eventId,
        event_source_url: window.location.href,
        urlParameters: this.getUrlParameters()
      };

      if (window.FBCAPI_CONFIG.debug) {
        console.log(`[FBCAPI] üöÄ Sending ${eventType}:`, payload);
      }

      return fetch(window.FBCAPI_CONFIG.apiUrl + '/' + eventType.toLowerCase(), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Shop': window.FBCAPI_CONFIG.shopUrl
        },
        body: JSON.stringify(payload)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        if (window.FBCAPI_CONFIG.debug) {
          console.log(`[FBCAPI] ‚úÖ ${eventType} Success:`, data);
        }
        return data;
      })
      .catch(error => {
        console.error(`[FBCAPI] ‚ùå ${eventType} Error:`, error);
        
        // Opcional: Enviar para servi√ßo de logs
        if (window.FBCAPI_CONFIG.errorTracking) {
          this.logError(eventType, error, payload);
        }
        
        throw error;
      });
    },

    logError: function(eventType, error, payload) {
      // Implementar logging de erros se necess√°rio
      console.error('[FBCAPI] Error logged:', { eventType, error: error.message, payload });
    }
  };
</script>

{% comment %} ===== SNIPPET 2: VIEWCONTENT - P√ÅGINA DE PRODUTO ===== {% endcomment %}
{% comment %} 
  Arquivo: templates/product.liquid ou sections/product-form.liquid
  Posi√ß√£o: No final da p√°gina
{% endcomment %}

{% if template contains 'product' %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  {% assign current_variant = product.selected_or_first_available_variant %}
  
  const productData = {
    content_ids: ['{{ current_variant.id }}'],
    content_name: '{{ product.title | escape }}',
    content_type: 'product',
    value: {{ current_variant.price | money_without_currency | remove: ',' | times: 0.01 }},
    currency: '{{ cart.currency.iso_code }}',
    content_category: '{{ product.type | escape }}',
    brand: '{{ product.vendor | escape }}',
    availability: '{{ current_variant.available | ternary: "in stock", "out of stock" }}',
    condition: 'new',
    contents: [{
      id: '{{ current_variant.id }}',
      quantity: 1,
      item_price: {{ current_variant.price | money_without_currency | remove: ',' | times: 0.01 }},
      title: '{{ product.title | escape }}',
      category: '{{ product.type | escape }}',
      brand: '{{ product.vendor | escape }}'
      {% if current_variant.title != 'Default Title' %},
      variant_name: '{{ current_variant.title | escape }}'
      {% endif %}
    }]
  };

  // Aguardar um pouco para garantir que a p√°gina carregou
  setTimeout(function() {
    window.FBCAPI.sendEvent('ViewContent', productData);
  }, 500);

  // Atualizar dados quando variante muda
  document.addEventListener('variant:change', function(e) {
    if (e.detail && e.detail.variant) {
      const variant = e.detail.variant;
      const updatedData = {
        ...productData,
        content_ids: [variant.id.toString()],
        value: variant.price / 100,
        availability: variant.available ? 'in stock' : 'out of stock',
        contents: [{
          ...productData.contents[0],
          id: variant.id.toString(),
          item_price: variant.price / 100,
          variant_name: variant.title !== 'Default Title' ? variant.title : undefined
        }]
      };
      
      window.FBCAPI.sendEvent('ViewContent', updatedData);
    }
  });
});
</script>
{% endif %}

{% comment %} ===== SNIPPET 3: ADDTOCART - ADICIONAR AO CARRINHO ===== {% endcomment %}
{% comment %} 
  Arquivo: sections/product-form.liquid
  Posi√ß√£o: Ap√≥s o formul√°rio de add to cart
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const addToCartForms = document.querySelectorAll('form[action*="/cart/add"]');
  
  addToCartForms.forEach(function(form) {
    form.addEventListener('submit', function(e) {
      const formData = new FormData(this);
      const variantId = formData.get('id');
      const quantity = parseInt(formData.get('quantity') || 1);
      
      {% if product %}
      // Dados do produto atual
      const variants = {{ product.variants | json }};
      const selectedVariant = variants.find(v => v.id == variantId);
      
      if (selectedVariant) {
        const addToCartData = {
          content_ids: [variantId.toString()],
          content_name: '{{ product.title | escape }}',
          content_type: 'product',
          value: (selectedVariant.price * quantity) / 100,
          currency: '{{ cart.currency.iso_code }}',
          quantity: quantity,
          content_category: '{{ product.type | escape }}',
          brand: '{{ product.vendor | escape }}',
          availability: selectedVariant.available ? 'in stock' : 'out of stock',
          condition: 'new',
          contents: [{
            id: variantId.toString(),
            quantity: quantity,
            item_price: selectedVariant.price / 100,
            title: '{{ product.title | escape }}',
            category: '{{ product.type | escape }}',
            brand: '{{ product.vendor | escape }}'
            {% if selectedVariant.title != 'Default Title' %},
            variant_name: selectedVariant.title
            {% endif %}
          }]
        };

        // Enviar evento ap√≥s pequeno delay para garantir que o produto foi adicionado
        setTimeout(function() {
          window.FBCAPI.sendEvent('AddToCart', addToCartData);
        }, 100);
      }
      {% endif %}
    });
  });
});
</script>

{% comment %} ===== SNIPPET 4: INITIATECHECKOUT - INICIAR CHECKOUT ===== {% endcomment %}
{% comment %} 
  Arquivo: templates/cart.liquid ou sections/cart-drawer.liquid
  Posi√ß√£o: Pr√≥ximo aos bot√µes de checkout
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const checkoutButtons = document.querySelectorAll('button[name="add"], .btn--checkout, [href*="/checkouts"], [href*="/cart"]');
  
  checkoutButtons.forEach(function(button) {
    button.addEventListener('click', function(e) {
      // S√≥ enviar se realmente for para checkout
      if (this.href && this.href.includes('/checkouts')) {
        sendInitiateCheckoutEvent();
      } else if (this.type === 'submit' || this.tagName === 'BUTTON') {
        // Para bot√µes de checkout
        sendInitiateCheckoutEvent();
      }
    });
  });

  function sendInitiateCheckoutEvent() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        if (cart.item_count === 0) {
          console.warn('[FBCAPI] Cart is empty, skipping InitiateCheckout');
          return;
        }

        const contents = cart.items.map(item => ({
          id: item.variant_id.toString(),
          quantity: item.quantity,
          item_price: item.price / 100,
          title: item.product_title,
          category: item.product_type || '',
          brand: item.vendor || '',
          variant: item.variant_title !== 'Default Title' ? item.variant_title : undefined
        }));

        const checkoutData = {
          contents: contents,
          value: cart.total_price / 100,
          currency: '{{ cart.currency.iso_code }}',
          num_items: cart.item_count,
          content_ids: contents.map(item => item.id),
          content_type: 'product'
        };

        window.FBCAPI.sendEvent('InitiateCheckout', checkoutData);
      })
      .catch(error => {
        console.error('[FBCAPI] Error fetching cart for InitiateCheckout:', error);
      });
  }
});
</script>

{% comment %} ===== SNIPPET 5: PURCHASE - COMPRA CONCLU√çDA ===== {% endcomment %}
{% comment %} 
  Arquivo: checkout.liquid (Shopify Plus) ou order-status.liquid
  Posi√ß√£o: No final da p√°gina
{% endcomment %}

{% if first_time_accessed and order %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  const orderData = {
    order_id: '{{ order.order_number }}',
    value: {{ order.total_price | money_without_currency | remove: ',' | times: 0.01 }},
    currency: '{{ order.currency }}',
    contents: [
      {% for line_item in order.line_items %}
      {
        id: '{{ line_item.variant_id }}',
        quantity: {{ line_item.quantity }},
        item_price: {{ line_item.price | money_without_currency | remove: ',' | times: 0.01 }},
        title: '{{ line_item.title | escape }}',
        category: '{{ line_item.product.type | escape }}',
        brand: '{{ line_item.vendor | escape }}',
        sku: '{{ line_item.sku | escape }}'
        {% if line_item.variant.title != 'Default Title' %},
        variant_name: '{{ line_item.variant.title | escape }}'
        {% endif %}
        {% if line_item.original_price > line_item.price %},
        original_price: {{ line_item.original_price | money_without_currency | remove: ',' | times: 0.01 }},
        discount_amount: {{ line_item.original_price | minus: line_item.price | money_without_currency | remove: ',' | times: 0.01 }}
        {% endif %}
      }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ],
    num_items: {{ order.line_items.size }},
    content_type: 'product',
    content_ids: [{% for line_item in order.line_items %}'{{ line_item.variant_id }}'{% unless forloop.last %},{% endunless %}{% endfor %}],
    
    {% comment %} Informa√ß√µes financeiras {% endcomment %}
    {% if order.shipping_price > 0 %}
    shipping_cost: {{ order.shipping_price | money_without_currency | remove: ',' | times: 0.01 }},
    {% endif %}
    {% if order.tax_price > 0 %}
    tax_amount: {{ order.tax_price | money_without_currency | remove: ',' | times: 0.01 }},
    {% endif %}
    {% if order.total_discounts > 0 %}
    discount_amount: {{ order.total_discounts | money_without_currency | remove: ',' | times: 0.01 }},
    {% endif %}
    order_total: {{ order.total_price | money_without_currency | remove: ',' | times: 0.01 }},
    subtotal: {{ order.subtotal_price | money_without_currency | remove: ',' | times: 0.01 }},
    
    {% comment %} Status do pagamento {% endcomment %}
    payment_status: 'completed',
    
    {% comment %} Cupons de desconto {% endcomment %}
    {% if order.discount_codes.size > 0 %}
    coupon_codes: [{% for discount in order.discount_codes %}'{{ discount.code }}'{% unless forloop.last %},{% endunless %}{% endfor %}],
    {% endif %}
    
    {% comment %} Informa√ß√µes de entrega {% endcomment %}
    {% if order.shipping_method %}
    delivery_category: 'standard',
    shipping_method: '{{ order.shipping_method.title }}',
    {% endif %}
    
    {% comment %} Tipo de cliente {% endcomment %}
    {% if customer %}
    customer_type: '{% if customer.orders_count == 1 %}new{% elsif customer.orders_count <= 5 %}returning{% else %}vip{% endif %}',
    {% endif %}
    order_source: 'website'
  };

  // Aguardar um pouco para garantir que a p√°gina carregou completamente
  setTimeout(function() {
    window.FBCAPI.sendEvent('Purchase', orderData);
  }, 1000);
});
</script>
{% endif %}

{% comment %} ===== SNIPPET 6: ADDPAYMENTINFO - INFORMA√á√ïES DE PAGAMENTO ===== {% endcomment %}
{% comment %} 
  Arquivo: checkout.liquid ou na p√°gina de m√©todo de pagamento
  Posi√ß√£o: Onde est√£o os formul√°rios de pagamento
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Detectar mudan√ßas nos m√©todos de pagamento
  const paymentSelectors = [
    'form[action*="/checkout"]',
    '.payment-form',
    '[data-payment-form]',
    '.payment-methods',
    'input[name*="payment"]'
  ];
  
  paymentSelectors.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(element => {
      element.addEventListener('change', handlePaymentChange);
      element.addEventListener('submit', handlePaymentSubmit);
    });
  });

  function handlePaymentChange(e) {
    if (e.target.name && (
      e.target.name.includes('payment') || 
      e.target.type === 'radio' && e.target.name.includes('method')
    )) {
      setTimeout(sendAddPaymentInfoEvent, 300); // Pequeno delay para garantir que a sele√ß√£o foi processada
    }
  }

  function handlePaymentSubmit(e) {
    sendAddPaymentInfoEvent();
  }

  function sendAddPaymentInfoEvent() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        if (cart.item_count === 0) {
          console.warn('[FBCAPI] Cart is empty, skipping AddPaymentInfo');
          return;
        }

        const contents = cart.items.map(item => ({
          id: item.variant_id.toString(),
          quantity: item.quantity,
          item_price: item.price / 100,
          title: item.product_title,
          category: item.product_type || '',
          brand: item.vendor || '',
          variant_name: item.variant_title !== 'Default Title' ? item.variant_title : undefined,
          sku: item.sku || ''
        }));

        const paymentData = {
          contents: contents,
          value: cart.total_price / 100,
          currency: '{{ cart.currency.iso_code }}',
          num_items: cart.item_count,
          content_ids: contents.map(item => item.id),
          content_type: 'product',
          payment_method: detectPaymentMethod(),
          payment_type: detectPaymentType(),
          checkout_step: 3,
          payment_source: 'checkout_page',
          device_type: /Mobi|Android/i.test(navigator.userAgent) ? 'mobile' : 
                      /Tablet|iPad/i.test(navigator.userAgent) ? 'tablet' : 'desktop'
        };

        // Adicionar dados financeiros se dispon√≠veis
        const shippingCost = detectShippingCost();
        const taxAmount = detectTaxAmount();
        if (shippingCost) paymentData.shipping_cost = shippingCost;
        if (taxAmount) paymentData.tax_amount = taxAmount;

        window.FBCAPI.sendEvent('AddPaymentInfo', paymentData);
      })
      .catch(error => {
        console.error('[FBCAPI] Error fetching cart for AddPaymentInfo:', error);
      });
  }

  function detectPaymentMethod() {
    // M√©todos mais espec√≠ficos primeiro
    const methodDetectors = [
      { selector: 'input[value*="paypal"]:checked, .paypal.selected', method: 'paypal' },
      { selector: 'input[value*="apple"]:checked, .apple-pay.selected', method: 'apple_pay' },
      { selector: 'input[value*="google"]:checked, .google-pay.selected', method: 'google_pay' },
      { selector: 'input[value*="pix"]:checked, .pix.selected', method: 'pix' },
      { selector: 'input[value*="boleto"]:checked, .boleto.selected', method: 'boleto' },
      { selector: 'input[value*="klarna"]:checked, .klarna.selected', method: 'klarna' },
      { selector: 'input[value*="afterpay"]:checked, .afterpay.selected', method: 'afterpay' },
      { selector: 'input[value*="credit"]:checked, .credit-card.selected', method: 'credit_card' },
      { selector: 'input[value*="debit"]:checked, .debit-card.selected', method: 'debit_card' },
      { selector: 'input[value*="bank"]:checked, .bank-transfer.selected', method: 'bank_transfer' }
    ];

    for (const detector of methodDetectors) {
      if (document.querySelector(detector.selector)) {
        return detector.method;
      }
    }

    // Fallback: verificar por data attributes
    const selectedPayment = document.querySelector('[data-payment-method].selected, [data-method].selected');
    if (selectedPayment) {
      return selectedPayment.dataset.paymentMethod || selectedPayment.dataset.method || 'credit_card';
    }

    return 'credit_card'; // fallback padr√£o
  }

  function detectPaymentType() {
    if (document.querySelector('input[value*="subscription"]:checked, .subscription.selected')) {
      return 'subscription';
    }
    if (document.querySelector('input[value*="installment"]:checked, .installment.selected')) {
      return 'installment';
    }
    return 'one_time';
  }

  function detectShippingCost() {
    const shippingElements = document.querySelectorAll(
      '.shipping-cost, [data-shipping-cost], .shipping-price, [data-shipping-price]'
    );
    
    for (const element of shippingElements) {
      const cost = element.textContent || element.dataset.shippingCost || element.dataset.shippingPrice;
      if (cost) {
        const numericCost = parseFloat(cost.replace(/[^\d.,]/g, '').replace(',', '.'));
        if (!isNaN(numericCost) && numericCost > 0) {
          return numericCost;
        }
      }
    }
    return null;
  }

  function detectTaxAmount() {
    const taxElements = document.querySelectorAll(
      '.tax-amount, [data-tax-amount], .tax-price, [data-tax-price]'
    );
    
    for (const element of taxElements) {
      const tax = element.textContent || element.dataset.taxAmount || element.dataset.taxPrice;
      if (tax) {
        const numericTax = parseFloat(tax.replace(/[^\d.,]/g, '').replace(',', '.'));
        if (!isNaN(numericTax) && numericTax > 0) {
          return numericTax;
        }
      }
    }
    return null;
  }
});
</script>

{% comment %} ===== SNIPPET 7: ADDTOWISHLIST - LISTA DE DESEJOS ===== {% endcomment %}
{% comment %} 
  Arquivo: snippets/wishlist-button.liquid ou onde implementar wishlist
  Posi√ß√£o: Pr√≥ximo ao bot√£o de wishlist
{% endcomment %}

<script>
function addToWishlist(productId, variantId, productData) {
  const wishlistData = {
    content_ids: [variantId.toString()],
    content_name: productData.title,
    content_type: 'product',
    value: productData.price / 100,
    currency: '{{ cart.currency.iso_code }}',
    num_items: 1,
    contents: [{
      id: variantId.toString(),
      quantity: 1,
      item_price: productData.price / 100,
      title: productData.title,
      category: productData.type || '',
      brand: productData.vendor || '',
      availability: productData.available ? 'in stock' : 'out of stock',
      condition: 'new'
    }],
    wishlist_name: 'favorites',
    wishlist_type: 'favorites',
    user_intent: 'later_purchase'
  };

  window.FBCAPI.sendEvent('AddToWishlist', wishlistData);
}

// Exemplo de uso com eventos de clique
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.wishlist-btn, [data-wishlist]').forEach(function(btn) {
    btn.addEventListener('click', function() {
      const productId = this.dataset.productId;
      const variantId = this.dataset.variantId;
      const productData = {
        title: this.dataset.productTitle,
        price: parseFloat(this.dataset.productPrice),
        type: this.dataset.productType,
        vendor: this.dataset.productVendor,
        available: this.dataset.productAvailable === 'true'
      };
      
      addToWishlist(productId, variantId, productData);
    });
  });
});
</script>

{% comment %} ===== SNIPPET 7: PAGEVIEW - NAVEGA√á√ÉO GERAL ===== {% endcomment %}
{% comment %} 
  Arquivo: layout/theme.liquid
  Posi√ß√£o: Antes de </body>
{% endcomment %}

<script>
// PageView tracking para navega√ß√£o geral
document.addEventListener('DOMContentLoaded', function() {
  // S√≥ enviar PageView se n√£o for p√°gina de produto (que j√° tem ViewContent)
  if (!document.body.classList.contains('template-product')) {
    const pageData = {
      event_source_url: window.location.href,
      page_title: document.title,
      page_type: '{{ template | split: '.' | first }}',
      shop_domain: '{{ shop.permanent_domain }}'
    };

    // Aguardar carregamento completo
    setTimeout(function() {
      window.FBCAPI.sendEvent('PageView', pageData);
    }, 1000);
  }
});
</script>

{% comment %} ===== CONFIGURA√á√ïES DO ADMIN ===== {% endcomment %}
{% comment %}
  Adicione no config/settings_schema.json para criar interface no admin:

  {
    "name": "Facebook Conversions API",
    "settings": [
      {
        "type": "header",
        "content": "Facebook Conversions API E-commerce"
      },
      {
        "type": "text",
        "id": "fbcapi_url",
        "label": "API URL",
        "info": "URL da sua API de convers√µes (ex: https://sua-api.com/api/track)",
        "default": ""
      },
      {
        "type": "checkbox",
        "id": "fbcapi_debug",
        "label": "Modo Debug",
        "info": "Ativar logs detalhados no console do navegador",
        "default": false
      },
      {
        "type": "checkbox",
        "id": "fbcapi_enable_viewcontent",
        "label": "Ativar ViewContent",
        "info": "Rastrear visualiza√ß√µes de produto",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "fbcapi_enable_addtocart",
        "label": "Ativar AddToCart",
        "info": "Rastrear adi√ß√µes ao carrinho",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "fbcapi_enable_checkout",
        "label": "Ativar InitiateCheckout",
        "info": "Rastrear in√≠cio do checkout",
        "default": true
      },
             {
         "type": "checkbox",
         "id": "fbcapi_enable_purchase",
         "label": "Ativar Purchase",
         "info": "Rastrear compras conclu√≠das",
         "default": true
       },
       {
         "type": "checkbox",
         "id": "fbcapi_enable_paymentinfo",
         "label": "Ativar AddPaymentInfo",
         "info": "Rastrear adi√ß√£o de informa√ß√µes de pagamento",
         "default": true
       },
       {
         "type": "checkbox",
         "id": "fbcapi_enable_wishlist",
         "label": "Ativar AddToWishlist",
         "info": "Rastrear adi√ß√µes √† lista de desejos",
         "default": false
       }
    ]
  }
{% endcomment %}

{% comment %} ===== INSTRU√á√ïES DE INSTALA√á√ÉO ===== {% endcomment %}
{% comment %}
  1. Copie o SNIPPET 1 para layout/theme.liquid antes de </head>
  2. Configure a URL da sua API no SNIPPET 1
  3. Copie os snippets espec√≠ficos para os arquivos apropriados
  4. Teste cada evento no console do navegador com debug: true
  5. Verifique no Facebook Events Manager se os eventos est√£o chegando
  6. Adicione as configura√ß√µes do admin para facilitar o gerenciamento

  Ordem de prioridade para implementa√ß√£o:
  1. ViewContent (p√°ginas de produto)
  2. AddToCart (formul√°rios de carrinho)
  3. InitiateCheckout (carrinho/checkout)
  4. AddPaymentInfo (informa√ß√µes de pagamento)
  5. Purchase (confirma√ß√£o de pedido)
  6. AddToWishlist (se aplic√°vel)
{% endcomment %} 