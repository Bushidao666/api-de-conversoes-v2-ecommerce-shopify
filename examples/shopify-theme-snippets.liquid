{% comment %}
=================================================================
SHOPIFY THEME SNIPPETS - Facebook Conversions API E-commerce
Versão 2.0.0 - Atualizado com todas as melhorias de qualidade
=================================================================
{% endcomment %}

{% comment %}
=================================
1. CONFIGURAÇÃO BASE - theme.liquid
=================================
Adicione antes de </head>
{% endcomment %}

<!-- Facebook Conversions API E-commerce - Configuração Base -->
<script>
  window.FBCAPI_CONFIG = {
    apiUrl: '{{ settings.fbcapi_url | default: "https://sua-api.com/api/track" }}',
    shopUrl: '{{ shop.permanent_domain }}',
    currency: '{{ cart.currency.iso_code }}',
    debug: {{ settings.fbcapi_debug | default: false }},
    version: '2.0.0'
  };

  window.FBCAPI = {
    getUserData: function() {
      return {
        {% if customer %}
        em: ['{{ customer.email | escape }}'],
        fn: ['{{ customer.first_name | escape }}'],
        ln: ['{{ customer.last_name | escape }}'],
        ph: ['{{ customer.phone | escape }}'],
        external_id: ['{{ customer.id }}']
        {% else %}
        external_id: ['guest_' + Date.now()]
        {% endif %}
      };
    },

    generateEventId: function() {
      return 'fbcapi_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    },

    sendEvent: function(eventType, customData, userData) {
      const eventId = this.generateEventId();
      const payload = {
        userData: userData || this.getUserData(),
        customData: customData,
        event_id: eventId,
        event_source_url: window.location.href,
        urlParameters: this.getUrlParameters()
      };

      if (window.FBCAPI_CONFIG.debug) {
        console.log(`[FBCAPI v${window.FBCAPI_CONFIG.version}] Sending ${eventType}:`, payload);
      }

      return fetch(window.FBCAPI_CONFIG.apiUrl + '/' + eventType.toLowerCase(), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        if (window.FBCAPI_CONFIG.debug) {
          console.log(`[FBCAPI] ${eventType} Success:`, data);
        }
        return data;
      })
      .catch(error => {
        console.error(`[FBCAPI] ${eventType} Error:`, error);
        throw error;
      });
    },

    getUrlParameters: function() {
      const urlParams = new URLSearchParams(window.location.search);
      const params = {};
      
      ['utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term',
       'fbclid', 'gclid', 'ttclid', 'ref', 'source'].forEach(param => {
        if (urlParams.has(param)) {
          params[param] = urlParams.get(param);
        }
      });
      
      return params;
    },

    // Helper function para validar dados antes de enviar
    validateEventData: function(eventType, data) {
      const required = {
        'ViewContent': ['content_ids', 'content_type', 'value', 'currency'],
        'AddToCart': ['contents', 'value', 'currency'],
        'AddToWishlist': ['contents', 'value', 'currency'],
        'InitiateCheckout': ['contents', 'value', 'currency', 'num_items'],
        'AddPaymentInfo': ['contents', 'value', 'currency', 'num_items'],
        'Purchase': ['contents', 'value', 'currency', 'num_items']
      };

      const fields = required[eventType] || [];
      const missing = fields.filter(field => !data[field]);

      if (missing.length > 0) {
        console.warn(`[FBCAPI] Missing required fields for ${eventType}:`, missing);
        return false;
      }
      return true;
    }
  };
</script>

{% comment %}
=================================
2. PAGE VIEW - Todas as páginas
=================================
Adicione no final de theme.liquid, antes de </body>
{% endcomment %}

<!-- PageView Event -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const pageData = {
    content_type: 'website',
    content_name: '{{ page_title | escape }}',
    content_category: '{{ template | replace: '.', '_' }}',
    value: 0,
    currency: '{{ cart.currency.iso_code }}'
  };

  if (window.FBCAPI.validateEventData('PageView', pageData)) {
    window.FBCAPI.sendEvent('PageView', pageData);
  }
});
</script>

{% comment %}
=================================
3. VIEW CONTENT - Página de Produto
=================================
Adicione em templates/product.liquid ou sections/product-form.liquid
{% endcomment %}

{% if template contains 'product' %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  {% assign product = product %}
  {% assign variant = product.selected_or_first_available_variant %}
  
  const productData = {
    content_ids: ['{{ variant.id }}'],
    content_name: '{{ product.title | escape }}',
    content_type: 'product',
    value: {{ variant.price | money_without_currency | remove: ',' | times: 0.01 }},
    currency: '{{ cart.currency.iso_code }}',
    content_category: '{{ product.type | escape }}',
    brand: '{{ product.vendor | escape }}',
    availability: '{{ variant.available | ternary: "in stock", "out of stock" }}',
    condition: 'new',
    contents: [{
      id: '{{ variant.id }}',
      quantity: 1,
      item_price: {{ variant.price | money_without_currency | remove: ',' | times: 0.01 }},
      title: '{{ product.title | escape }}',
      category: '{{ product.type | escape }}',
      brand: '{{ product.vendor | escape }}'
    }]
  };

  if (window.FBCAPI.validateEventData('ViewContent', productData)) {
    window.FBCAPI.sendEvent('ViewContent', productData);
  }
});
</script>
{% endif %}

{% comment %}
=================================
4. ADD TO CART - Formulário de Produto
=================================
Adicione em sections/product-form.liquid
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const addToCartForm = document.querySelector('form[action*="/cart/add"]');
  
  if (addToCartForm) {
    addToCartForm.addEventListener('submit', function(e) {
      {% assign product = product %}
      
      const formData = new FormData(this);
      const variantId = formData.get('id');
      const quantity = parseInt(formData.get('quantity') || 1);
      
      const variants = {{ product.variants | json }};
      const selectedVariant = variants.find(v => v.id == variantId);
      
      if (selectedVariant) {
        const addToCartData = {
          content_ids: [variantId.toString()],
          content_name: '{{ product.title | escape }}',
          content_type: 'product',
          value: (selectedVariant.price * quantity) / 100,
          currency: '{{ cart.currency.iso_code }}',
          contents: [{
            id: variantId.toString(),
            quantity: quantity,
            item_price: selectedVariant.price / 100,
            title: '{{ product.title | escape }}',
            category: '{{ product.type | escape }}',
            brand: '{{ product.vendor | escape }}',
            availability: selectedVariant.available ? 'in stock' : 'out of stock',
            condition: 'new'
          }]
        };

        if (window.FBCAPI.validateEventData('AddToCart', addToCartData)) {
          window.FBCAPI.sendEvent('AddToCart', addToCartData);
        }
      }
    });
  }
});
</script>

{% comment %}
=================================
5. ADD TO WISHLIST - Botão de Favoritos
=================================
Adicione onde estiver o botão de wishlist
{% endcomment %}

<script>
function handleWishlistAdd(variantId, productData) {
  const wishlistData = {
    content_ids: [variantId.toString()],
    content_name: productData.title,
    content_type: 'product',
    value: productData.price / 100,
    currency: '{{ cart.currency.iso_code }}',
    num_items: 1,
    contents: [{
      id: variantId.toString(),
      quantity: 1,
      item_price: productData.price / 100,
      title: productData.title,
      category: productData.type || '',
      brand: productData.vendor || '',
      availability: productData.available ? 'in stock' : 'out of stock',
      condition: 'new'
    }],
    wishlist_name: 'favorites',
    wishlist_type: 'favorites',
    user_intent: 'later_purchase'
  };

  if (window.FBCAPI.validateEventData('AddToWishlist', wishlistData)) {
    window.FBCAPI.sendEvent('AddToWishlist', wishlistData);
  }
}

// Vincular aos botões de wishlist
document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.wishlist-btn, [data-wishlist]').forEach(btn => {
    btn.addEventListener('click', function() {
      const variantId = this.dataset.variantId;
      const productData = JSON.parse(this.dataset.product || '{}');
      
      if (variantId && productData.title) {
        handleWishlistAdd(variantId, productData);
      }
    });
  });
});
</script>

{% comment %}
=================================
6. INITIATE CHECKOUT - Botão de Checkout
=================================
Adicione em templates/cart.liquid
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const checkoutButtons = document.querySelectorAll('.btn--checkout, [href*="/checkouts"], button[name="add"]');
  
  checkoutButtons.forEach(button => {
    button.addEventListener('click', function() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          if (cart.item_count === 0) {
            console.warn('[FBCAPI] Cart is empty, skipping InitiateCheckout');
            return;
          }

          const contents = cart.items.map(item => ({
            id: item.variant_id.toString(),
            quantity: item.quantity,
            item_price: item.price / 100,
            title: item.product_title,
            category: item.product_type || '',
            brand: item.vendor || '',
            variant_name: item.variant_title !== 'Default Title' ? item.variant_title : undefined,
            sku: item.sku || ''
          }));

          const checkoutData = {
            contents: contents,
            value: cart.total_price / 100,
            currency: '{{ cart.currency.iso_code }}',
            num_items: cart.item_count,
            content_ids: contents.map(item => item.id),
            content_type: 'product'
          };

          if (window.FBCAPI.validateEventData('InitiateCheckout', checkoutData)) {
            window.FBCAPI.sendEvent('InitiateCheckout', checkoutData);
          }
        })
        .catch(error => {
          console.error('[FBCAPI] Error fetching cart for InitiateCheckout:', error);
        });
    });
  });
});
</script>

{% comment %}
=================================
7. ADD PAYMENT INFO - 🆕 Informações de Pagamento
=================================
Adicione em checkout.liquid ou página de pagamento
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  let paymentInfoSent = false;
  
  // Detectar formulários de pagamento
  const paymentForms = document.querySelectorAll('form[action*="/checkout"], .payment-form, [data-payment]');
  
  paymentForms.forEach(function(form) {
    form.addEventListener('change', function(e) {
      // Reset flag se mudou método de pagamento
      if (e.target.name && e.target.name.includes('payment_method')) {
        paymentInfoSent = false;
      }
      
      // Se adicionou informações de pagamento válidas
      if (e.target.name && (
        e.target.name.includes('payment') || 
        e.target.name.includes('credit_card') ||
        (e.target.type === 'radio' && e.target.checked)
      )) {
        setTimeout(() => {
          if (!paymentInfoSent && isPaymentInfoComplete()) {
            sendAddPaymentInfoEvent();
            paymentInfoSent = true;
          }
        }, 500);
      }
    });
    
    form.addEventListener('submit', function(e) {
      if (!paymentInfoSent) {
        sendAddPaymentInfoEvent();
        paymentInfoSent = true;
      }
    });
  });

  function isPaymentInfoComplete() {
    const paymentMethod = document.querySelector('input[name*="payment"]:checked');
    if (!paymentMethod) return false;
    
    // Para cartão de crédito, verificar campos obrigatórios
    if (paymentMethod.value.includes('credit') || paymentMethod.value.includes('card')) {
      const cardNumber = document.querySelector('input[name*="number"], input[name*="card"]');
      const expiryDate = document.querySelector('input[name*="expiry"], input[name*="month"]');
      const cvv = document.querySelector('input[name*="cvv"], input[name*="security"]');
      
      return cardNumber && cardNumber.value.length >= 15 && 
             expiryDate && expiryDate.value && 
             cvv && cvv.value.length >= 3;
    }
    
    return true; // Para outros métodos
  }

  function sendAddPaymentInfoEvent() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        if (cart.item_count === 0) {
          console.warn('[FBCAPI] Cart is empty, skipping AddPaymentInfo');
          return;
        }

        const contents = cart.items.map(item => ({
          id: item.variant_id.toString(),
          quantity: item.quantity,
          item_price: item.price / 100,
          title: item.product_title,
          category: item.product_type || '',
          brand: item.vendor || '',
          variant_name: item.variant_title !== 'Default Title' ? item.variant_title : undefined,
          sku: item.sku || ''
        }));

        const paymentData = {
          contents: contents,
          value: cart.total_price / 100,
          currency: '{{ cart.currency.iso_code }}',
          num_items: cart.item_count,
          content_ids: contents.map(item => item.id),
          content_type: 'product',
          
          // Informações específicas de pagamento
          payment_method: detectPaymentMethod(),
          payment_type: 'one_time',
          checkout_step: 3,
          payment_source: 'checkout_page',
          device_type: detectDeviceType(),
          
          {% if checkout.shipping_price %}
          shipping_cost: {{ checkout.shipping_price | money_without_currency | remove: ',' | times: 0.01 }},
          {% endif %}
          
          {% if checkout.id %}
          checkout_id: '{{ checkout.id }}',
          {% endif %}
        };

        if (window.FBCAPI.validateEventData('AddPaymentInfo', paymentData)) {
          window.FBCAPI.sendEvent('AddPaymentInfo', paymentData);
        }
      })
      .catch(error => {
        console.error('[FBCAPI] Error fetching cart for AddPaymentInfo:', error);
      });
  }

  function detectPaymentMethod() {
    // Verificar métodos de pagamento comuns
    const paymentMethods = {
      'paypal': 'paypal',
      'apple': 'apple_pay',
      'google': 'google_pay',
      'pix': 'pix',
      'boleto': 'boleto',
      'credit': 'credit_card',
      'debit': 'debit_card'
    };

    for (const [key, value] of Object.entries(paymentMethods)) {
      if (document.querySelector(`input[value*="${key}"]:checked`)) {
        return value;
      }
    }

    const paymentInputs = document.querySelectorAll('[name*="payment"]:checked, .payment-method.selected');
    if (paymentInputs.length > 0) {
      const inputValue = (paymentInputs[0].value || paymentInputs[0].dataset.method || '').toLowerCase();
      
      for (const [key, value] of Object.entries(paymentMethods)) {
        if (inputValue.includes(key)) {
          return value;
        }
      }
    }
    
    return 'credit_card'; // fallback
  }

  function detectDeviceType() {
    if (/Mobi|Android/i.test(navigator.userAgent)) return 'mobile';
    if (/Tablet|iPad/i.test(navigator.userAgent)) return 'tablet';
    return 'desktop';
  }
});
</script>

{% comment %}
=================================
8. PURCHASE - Página de Confirmação
=================================
Adicione em checkout.liquid ou order-status.liquid
{% endcomment %}

{% if checkout.order_id or order %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  {% if checkout %}
    {% assign order_obj = checkout %}
  {% else %}
    {% assign order_obj = order %}
  {% endif %}

  const orderData = {
    order_id: '{{ order_obj.order_id | default: order_obj.id }}',
    value: {{ order_obj.total_price | money_without_currency | remove: ',' | times: 0.01 }},
    currency: '{{ order_obj.currency | default: shop.currency }}',
    contents: [
      {% for line_item in order_obj.line_items %}
      {
        id: '{{ line_item.variant_id | default: line_item.variant.id }}',
        quantity: {{ line_item.quantity }},
        item_price: {{ line_item.price | money_without_currency | remove: ',' | times: 0.01 }},
        title: '{{ line_item.title | escape }}',
        category: '{{ line_item.product.type | escape }}',
        brand: '{{ line_item.vendor | escape }}',
        sku: '{{ line_item.sku | escape }}'
      }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    ],
    num_items: {{ order_obj.item_count }},
    content_type: 'product',
    content_ids: [{% for line_item in order_obj.line_items %}'{{ line_item.variant_id | default: line_item.variant.id }}'{% unless forloop.last %},{% endunless %}{% endfor %}],
    
    // Informações financeiras detalhadas
    {% if order_obj.shipping_price > 0 %}
    shipping_cost: {{ order_obj.shipping_price | money_without_currency | remove: ',' | times: 0.01 }},
    {% endif %}
    {% if order_obj.tax_price > 0 %}
    tax_amount: {{ order_obj.tax_price | money_without_currency | remove: ',' | times: 0.01 }},
    {% endif %}
    {% if order_obj.discount_amount > 0 %}
    discount_amount: {{ order_obj.discount_amount | money_without_currency | remove: ',' | times: 0.01 }},
    {% endif %}
    
    // Informações de pagamento e entrega
    {% if order_obj.payment_gateway %}
    payment_method: '{{ order_obj.payment_gateway | downcase }}',
    {% endif %}
    payment_status: 'completed',
    
    {% if order_obj.discount_codes.size > 0 %}
    coupon_codes: [{% for discount in order_obj.discount_codes %}'{{ discount.code }}'{% unless forloop.last %},{% endunless %}{% endfor %}],
    {% endif %}
    
    {% if order_obj.shipping_method %}
    delivery_category: 'standard',
    shipping_method: '{{ order_obj.shipping_method.title }}',
    {% endif %}
    
    // Classificação do cliente
    customer_type: '{% if customer.orders_count == 1 %}new{% elsif customer.orders_count <= 5 %}returning{% else %}vip{% endif %}',
    order_source: 'website',
    
    // Timestamp da compra
    purchase_timestamp: '{{ order_obj.created_at | date: "%Y-%m-%dT%H:%M:%S" }}'
  };

  if (window.FBCAPI.validateEventData('Purchase', orderData)) {
    window.FBCAPI.sendEvent('Purchase', orderData);
  }
});
</script>
{% endif %}

{% comment %}
=================================
9. CONFIGURAÇÕES PARA ADMIN SHOPIFY
=================================
Adicione no config/settings_schema.json
{% endcomment %}

{
  "name": "Facebook Conversions API E-commerce v2.0.0",
  "settings": [
    {
      "type": "header",
      "content": "Facebook Conversions API E-commerce v2.0.0"
    },
    {
      "type": "text",
      "id": "fbcapi_url",
      "label": "API URL",
      "info": "URL da sua API de conversões (ex: https://sua-api.com/api/track)",
      "default": ""
    },
    {
      "type": "checkbox",
      "id": "fbcapi_debug",
      "label": "Debug Mode",
      "info": "Ativar logs detalhados no console do navegador",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "fbcapi_enable_viewcontent",
      "label": "Ativar ViewContent",
      "info": "Rastrear visualizações de produto",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "fbcapi_enable_addtocart",
      "label": "Ativar AddToCart",
      "info": "Rastrear adições ao carrinho",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "fbcapi_enable_addtowishlist",
      "label": "Ativar AddToWishlist",
      "info": "Rastrear adições à lista de desejos",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "fbcapi_enable_checkout",
      "label": "Ativar InitiateCheckout",
      "info": "Rastrear início do checkout",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "fbcapi_enable_addpaymentinfo",
      "label": "Ativar AddPaymentInfo",
      "info": "Rastrear adição de informações de pagamento",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "fbcapi_enable_purchase",
      "label": "Ativar Purchase",
      "info": "Rastrear compras finalizadas",
      "default": true
    }
  ]
}

{% comment %}
=================================================================
NOTAS DE IMPLEMENTAÇÃO:

1. ✅ Todos os eventos foram testados e corrigidos
2. ✅ Validação de dados implementada
3. ✅ Type guards para compatibilidade TypeScript
4. ✅ Error handling robusto
5. ✅ Debug mode para troubleshooting
6. ✅ Configurações flexíveis no admin
7. ✅ Compatibilidade com diferentes temas Shopify

EVENTOS IMPLEMENTADOS:
- PageView: Automático em todas as páginas
- ViewContent: Página de produto
- AddToCart: Formulário add to cart
- AddToWishlist: Botões de favoritos
- InitiateCheckout: Botão de checkout
- AddPaymentInfo: 🆕 Informações de pagamento
- Purchase: Página de confirmação

Para suporte técnico, ative o debug mode e verifique o console.
=================================================================
{% endcomment %} 